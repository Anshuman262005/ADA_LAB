#include <stdio.h>
#include <stdlib.h>

#define LEFT -1
#define RIGHT 1


int getMobile(int perm[], int dir[], int n) {
    int mobile = 0, mobileIndex = -1;
    for (int i = 0; i < n; i++) {
        int neighbor = i + dir[i];
        if (neighbor >= 0 && neighbor < n && perm[i] > perm[neighbor]) {
            if (perm[i] > mobile) {
                mobile = perm[i];
                mobileIndex = i;
            }
        }
    }
    return mobileIndex;
}


void printPermutation(int perm[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", perm[i]);
    printf("\n");
}


void johnsonTrotter(int n) {
    int perm[n];
    int dir[n];

   
    for (int i = 0; i < n; i++) {
        perm[i] = i + 1;
        dir[i] = LEFT;
    }

    printPermutation(perm, n);

    while (1) {
        int mobileIndex = getMobile(perm, dir, n);
        if (mobileIndex == -1)
            break;

        int swapIndex = mobileIndex + dir[mobileIndex];

       
        int temp = perm[mobileIndex];
        perm[mobileIndex] = perm[swapIndex];
        perm[swapIndex] = temp;

        int tempDir = dir[mobileIndex];
        dir[mobileIndex] = dir[swapIndex];
        dir[swapIndex] = tempDir;

       
        mobileIndex = swapIndex;

       
        for (int i = 0; i < n; i++) {
            if (perm[i] > perm[mobileIndex]) {
                dir[i] = -dir[i];
            }
        }

        printPermutation(perm, n);
    }
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    johnsonTrotter(n);
    return 0;
}
