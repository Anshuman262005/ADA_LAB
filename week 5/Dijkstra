#include <stdio.h>
#include <limits.h>
#define V 5  
#define INF INT_MAX

int minDistance(int dist[], int visited[]) {
    int min = INF, min_index = -1;
    for (int v = 0; v < V; v++)
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    return min_index;
}

void printSolution(int dist[], int parent[], int src) {
    printf("Vertex\tDistance from %c\tPath\n", src + 'A');
    for (int i = 0; i < V; i++) {
        printf("%c -> %c\t%d\t\t", src + 'A', i + 'A', dist[i]);
        
        int path[V], count = 0, j = i;
        while (j != src) {
            path[count++] = j;
            j = parent[j];
        }
        printf("%c", src + 'A');
        for (int k = count - 1; k >= 0; k--)
            printf(" -> %c", path[k] + 'A');
        printf("\n");
    }
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];      
    int visited[V];   
    int parent[V];     

    for (int i = 0; i < V; i++) {
        dist[i] = INF;
        visited[i] = 0;
        parent[i] = -1;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = 1;

        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INF &&
                dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
    }

    printSolution(dist, parent, src);
}

int main() {
    
    int graph[V][V] = {
        
        { 0, 4, 1, 0, 0 }, 
        { 0, 0, 2, 1, 0 }, 
        { 0, 2, 0, 0, 5 }, 
        { 0, 0, 0, 0, 1 }, 
        { 0, 0, 0, 0, 0 }  
    };

    int startVertex = 0; 
    dijkstra(graph, startVertex);

    return 0;
}
